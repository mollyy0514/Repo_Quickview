{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createGetCssVar;\n/**\n * The benefit of this function is to help developers get CSS var from theme without specifying the whole variable\n * and they does not need to remember the prefix (defined once).\n */\n\nfunction createGetCssVar() {\n  let prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n  function appendVar() {\n    for (var _len = arguments.length, vars = new Array(_len), _key = 0; _key < _len; _key++) {\n      vars[_key] = arguments[_key];\n    }\n\n    if (!vars.length) {\n      return '';\n    }\n\n    const value = vars[0];\n\n    if (typeof value === 'string' && !value.match(/(#|\\(|\\)|(-?(\\d*\\.)?\\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))/)) {\n      return `, var(--${prefix ? `${prefix}-` : ''}${value}${appendVar(...vars.slice(1))})`;\n    }\n\n    return `, ${value}`;\n  } // AdditionalVars makes `getCssVar` less strict, so it can be use like this `getCssVar('non-mui-variable')` without type error.\n\n\n  const getCssVar = function (field) {\n    for (var _len2 = arguments.length, vars = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      vars[_key2 - 1] = arguments[_key2];\n    }\n\n    return `var(--${prefix ? `${prefix}-` : ''}${field}${appendVar(...vars)})`;\n  };\n\n  return getCssVar;\n}","map":{"version":3,"sources":["/Users/molly/Desktop/React/Repo_Quickview/node_modules/@mui/system/cssVars/createGetCssVar.js"],"names":["Object","defineProperty","exports","value","default","createGetCssVar","prefix","appendVar","vars","length","match","slice","getCssVar","field"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,eAAlB;AAEA;AACA;AACA;AACA;;AACA,SAASA,eAAT,GAAsC;AAAA,MAAbC,MAAa,uEAAJ,EAAI;;AACpC,WAASC,SAAT,GAA4B;AAAA,sCAANC,IAAM;AAANA,MAAAA,IAAM;AAAA;;AAC1B,QAAI,CAACA,IAAI,CAACC,MAAV,EAAkB;AAChB,aAAO,EAAP;AACD;;AAED,UAAMN,KAAK,GAAGK,IAAI,CAAC,CAAD,CAAlB;;AAEA,QAAI,OAAOL,KAAP,KAAiB,QAAjB,IAA6B,CAACA,KAAK,CAACO,KAAN,CAAY,6EAAZ,CAAlC,EAA8H;AAC5H,aAAQ,WAAUJ,MAAM,GAAI,GAAEA,MAAO,GAAb,GAAkB,EAAG,GAAEH,KAAM,GAAEI,SAAS,CAAC,GAAGC,IAAI,CAACG,KAAL,CAAW,CAAX,CAAJ,CAAmB,GAAnF;AACD;;AAED,WAAQ,KAAIR,KAAM,EAAlB;AACD,GAbmC,CAalC;;;AAGF,QAAMS,SAAS,GAAG,UAACC,KAAD,EAAoB;AAAA,uCAATL,IAAS;AAATA,MAAAA,IAAS;AAAA;;AACpC,WAAQ,SAAQF,MAAM,GAAI,GAAEA,MAAO,GAAb,GAAkB,EAAG,GAAEO,KAAM,GAAEN,SAAS,CAAC,GAAGC,IAAJ,CAAU,GAAxE;AACD,GAFD;;AAIA,SAAOI,SAAP;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createGetCssVar;\n\n/**\n * The benefit of this function is to help developers get CSS var from theme without specifying the whole variable\n * and they does not need to remember the prefix (defined once).\n */\nfunction createGetCssVar(prefix = '') {\n  function appendVar(...vars) {\n    if (!vars.length) {\n      return '';\n    }\n\n    const value = vars[0];\n\n    if (typeof value === 'string' && !value.match(/(#|\\(|\\)|(-?(\\d*\\.)?\\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))/)) {\n      return `, var(--${prefix ? `${prefix}-` : ''}${value}${appendVar(...vars.slice(1))})`;\n    }\n\n    return `, ${value}`;\n  } // AdditionalVars makes `getCssVar` less strict, so it can be use like this `getCssVar('non-mui-variable')` without type error.\n\n\n  const getCssVar = (field, ...vars) => {\n    return `var(--${prefix ? `${prefix}-` : ''}${field}${appendVar(...vars)})`;\n  };\n\n  return getCssVar;\n}"]},"metadata":{},"sourceType":"script"}