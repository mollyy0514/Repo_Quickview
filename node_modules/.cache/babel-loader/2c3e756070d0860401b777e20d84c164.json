{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.alpha = alpha;\nexports.darken = darken;\nexports.decomposeColor = decomposeColor;\nexports.emphasize = emphasize;\nexports.getContrastRatio = getContrastRatio;\nexports.getLuminance = getLuminance;\nexports.hexToRgb = hexToRgb;\nexports.hslToRgb = hslToRgb;\nexports.lighten = lighten;\nexports.recomposeColor = recomposeColor;\nexports.rgbToHex = rgbToHex;\n\nvar _utils = require(\"@mui/utils\");\n/**\n * Returns a number whose value is limited to the given range.\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */\n\n\nfunction clamp(value) {\n  let min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (value < min || value > max) {\n      console.error(`MUI: The value provided ${value} is out of range [${min}, ${max}].`);\n    }\n  }\n\n  return Math.min(Math.max(min, value), max);\n}\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\n * @returns {string} A CSS rgb color string\n */\n\n\nfunction hexToRgb(color) {\n  color = color.slice(1);\n  const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, 'g');\n  let colors = color.match(re);\n\n  if (colors && colors[0].length === 1) {\n    colors = colors.map(n => n + n);\n  }\n\n  return colors ? `rgb${colors.length === 4 ? 'a' : ''}(${colors.map((n, index) => {\n    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;\n  }).join(', ')})` : '';\n}\n\nfunction intToHex(int) {\n  const hex = int.toString(16);\n  return hex.length === 1 ? `0${hex}` : hex;\n}\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {object} - A MUI color object: {type: string, values: number[]}\n */\n\n\nfunction decomposeColor(color) {\n  // Idempotent\n  if (color.type) {\n    return color;\n  }\n\n  if (color.charAt(0) === '#') {\n    return decomposeColor(hexToRgb(color));\n  }\n\n  const marker = color.indexOf('(');\n  const type = color.substring(0, marker);\n\n  if (['rgb', 'rgba', 'hsl', 'hsla', 'color'].indexOf(type) === -1) {\n    throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: Unsupported \\`${color}\\` color.\nThe following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` : (0, _utils.formatMuiErrorMessage)(9, color));\n  }\n\n  let values = color.substring(marker + 1, color.length - 1);\n  let colorSpace;\n\n  if (type === 'color') {\n    values = values.split(' ');\n    colorSpace = values.shift();\n\n    if (values.length === 4 && values[3].charAt(0) === '/') {\n      values[3] = values[3].slice(1);\n    }\n\n    if (['srgb', 'display-p3', 'a98-rgb', 'prophoto-rgb', 'rec-2020'].indexOf(colorSpace) === -1) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: unsupported \\`${colorSpace}\\` color space.\nThe following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` : (0, _utils.formatMuiErrorMessage)(10, colorSpace));\n    }\n  } else {\n    values = values.split(',');\n  }\n\n  values = values.map(value => parseFloat(value));\n  return {\n    type,\n    values,\n    colorSpace\n  };\n}\n/**\n * Converts a color object with type and values to a string.\n * @param {object} color - Decomposed color\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns {string} A CSS color string\n */\n\n\nfunction recomposeColor(color) {\n  const {\n    type,\n    colorSpace\n  } = color;\n  let {\n    values\n  } = color;\n\n  if (type.indexOf('rgb') !== -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map((n, i) => i < 3 ? parseInt(n, 10) : n);\n  } else if (type.indexOf('hsl') !== -1) {\n    values[1] = `${values[1]}%`;\n    values[2] = `${values[2]}%`;\n  }\n\n  if (type.indexOf('color') !== -1) {\n    values = `${colorSpace} ${values.join(' ')}`;\n  } else {\n    values = `${values.join(', ')}`;\n  }\n\n  return `${type}(${values})`;\n}\n/**\n * Converts a color from CSS rgb format to CSS hex format.\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\n */\n\n\nfunction rgbToHex(color) {\n  // Idempotent\n  if (color.indexOf('#') === 0) {\n    return color;\n  }\n\n  const {\n    values\n  } = decomposeColor(color);\n  return `#${values.map((n, i) => intToHex(i === 3 ? Math.round(255 * n) : n)).join('')}`;\n}\n/**\n * Converts a color from hsl format to rgb format.\n * @param {string} color - HSL color values\n * @returns {string} rgb color values\n */\n\n\nfunction hslToRgb(color) {\n  color = decomposeColor(color);\n  const {\n    values\n  } = color;\n  const h = values[0];\n  const s = values[1] / 100;\n  const l = values[2] / 100;\n  const a = s * Math.min(l, 1 - l);\n\n  const f = function (n) {\n    let k = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (n + h / 30) % 12;\n    return l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  };\n\n  let type = 'rgb';\n  const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\n\n  if (color.type === 'hsla') {\n    type += 'a';\n    rgb.push(values[3]);\n  }\n\n  return recomposeColor({\n    type,\n    values: rgb\n  });\n}\n/**\n * The relative brightness of any point in a color space,\n * normalized to 0 for darkest black and 1 for lightest white.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {number} The relative brightness of the color in the range 0 - 1\n */\n\n\nfunction getLuminance(color) {\n  color = decomposeColor(color);\n  let rgb = color.type === 'hsl' ? decomposeColor(hslToRgb(color)).values : color.values;\n  rgb = rgb.map(val => {\n    if (color.type !== 'color') {\n      val /= 255; // normalized\n    }\n\n    return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;\n  }); // Truncate at 3 digits\n\n  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));\n}\n/**\n * Calculates the contrast ratio between two colors.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} A contrast ratio value in the range 0 - 21.\n */\n\n\nfunction getContrastRatio(foreground, background) {\n  const lumA = getLuminance(foreground);\n  const lumB = getLuminance(background);\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n/**\n * Sets the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} value - value to set the alpha channel to in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction alpha(color, value) {\n  color = decomposeColor(color);\n  value = clamp(value);\n\n  if (color.type === 'rgb' || color.type === 'hsl') {\n    color.type += 'a';\n  }\n\n  if (color.type === 'color') {\n    color.values[3] = `/${value}`;\n  } else {\n    color.values[3] = value;\n  }\n\n  return recomposeColor(color);\n}\n/**\n * Darkens a color.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction darken(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] *= 1 - coefficient;\n  } else if (color.type.indexOf('rgb') !== -1 || color.type.indexOf('color') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] *= 1 - coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}\n/**\n * Lightens a color.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction lighten(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] += (100 - color.values[2]) * coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] += (255 - color.values[i]) * coefficient;\n    }\n  } else if (color.type.indexOf('color') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] += (1 - color.values[i]) * coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}\n/**\n * Darken or lighten a color, depending on its luminance.\n * Light colors are darkened, dark colors are lightened.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction emphasize(color) {\n  let coefficient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.15;\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}","map":{"version":3,"sources":["/Users/molly/Desktop/React/Repo_Quickview/node_modules/@mui/system/colorManipulator.js"],"names":["Object","defineProperty","exports","value","alpha","darken","decomposeColor","emphasize","getContrastRatio","getLuminance","hexToRgb","hslToRgb","lighten","recomposeColor","rgbToHex","_utils","require","clamp","min","max","process","env","NODE_ENV","console","error","Math","color","slice","re","RegExp","length","colors","match","map","n","index","parseInt","round","join","intToHex","int","hex","toString","type","charAt","marker","indexOf","substring","Error","formatMuiErrorMessage","values","colorSpace","split","shift","parseFloat","i","h","s","l","a","f","k","rgb","push","val","Number","toFixed","foreground","background","lumA","lumB","coefficient"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,KAAR,GAAgBA,KAAhB;AACAF,OAAO,CAACG,MAAR,GAAiBA,MAAjB;AACAH,OAAO,CAACI,cAAR,GAAyBA,cAAzB;AACAJ,OAAO,CAACK,SAAR,GAAoBA,SAApB;AACAL,OAAO,CAACM,gBAAR,GAA2BA,gBAA3B;AACAN,OAAO,CAACO,YAAR,GAAuBA,YAAvB;AACAP,OAAO,CAACQ,QAAR,GAAmBA,QAAnB;AACAR,OAAO,CAACS,QAAR,GAAmBA,QAAnB;AACAT,OAAO,CAACU,OAAR,GAAkBA,OAAlB;AACAV,OAAO,CAACW,cAAR,GAAyBA,cAAzB;AACAX,OAAO,CAACY,QAAR,GAAmBA,QAAnB;;AAEA,IAAIC,MAAM,GAAGC,OAAO,CAAC,YAAD,CAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,KAAT,CAAed,KAAf,EAAwC;AAAA,MAAlBe,GAAkB,uEAAZ,CAAY;AAAA,MAATC,GAAS,uEAAH,CAAG;;AACtC,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,QAAInB,KAAK,GAAGe,GAAR,IAAef,KAAK,GAAGgB,GAA3B,EAAgC;AAC9BI,MAAAA,OAAO,CAACC,KAAR,CAAe,2BAA0BrB,KAAM,qBAAoBe,GAAI,KAAIC,GAAI,IAA/E;AACD;AACF;;AAED,SAAOM,IAAI,CAACP,GAAL,CAASO,IAAI,CAACN,GAAL,CAASD,GAAT,EAAcf,KAAd,CAAT,EAA+BgB,GAA/B,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;;;AAGA,SAAST,QAAT,CAAkBgB,KAAlB,EAAyB;AACvBA,EAAAA,KAAK,GAAGA,KAAK,CAACC,KAAN,CAAY,CAAZ,CAAR;AACA,QAAMC,EAAE,GAAG,IAAIC,MAAJ,CAAY,OAAMH,KAAK,CAACI,MAAN,IAAgB,CAAhB,GAAoB,CAApB,GAAwB,CAAE,GAA5C,EAAgD,GAAhD,CAAX;AACA,MAAIC,MAAM,GAAGL,KAAK,CAACM,KAAN,CAAYJ,EAAZ,CAAb;;AAEA,MAAIG,MAAM,IAAIA,MAAM,CAAC,CAAD,CAAN,CAAUD,MAAV,KAAqB,CAAnC,EAAsC;AACpCC,IAAAA,MAAM,GAAGA,MAAM,CAACE,GAAP,CAAWC,CAAC,IAAIA,CAAC,GAAGA,CAApB,CAAT;AACD;;AAED,SAAOH,MAAM,GAAI,MAAKA,MAAM,CAACD,MAAP,KAAkB,CAAlB,GAAsB,GAAtB,GAA4B,EAAG,IAAGC,MAAM,CAACE,GAAP,CAAW,CAACC,CAAD,EAAIC,KAAJ,KAAc;AAC/E,WAAOA,KAAK,GAAG,CAAR,GAAYC,QAAQ,CAACF,CAAD,EAAI,EAAJ,CAApB,GAA8BT,IAAI,CAACY,KAAL,CAAWD,QAAQ,CAACF,CAAD,EAAI,EAAJ,CAAR,GAAkB,GAAlB,GAAwB,IAAnC,IAA2C,IAAhF;AACD,GAFuD,EAErDI,IAFqD,CAEhD,IAFgD,CAE1C,GAFD,GAEM,EAFnB;AAGD;;AAED,SAASC,QAAT,CAAkBC,GAAlB,EAAuB;AACrB,QAAMC,GAAG,GAAGD,GAAG,CAACE,QAAJ,CAAa,EAAb,CAAZ;AACA,SAAOD,GAAG,CAACX,MAAJ,KAAe,CAAf,GAAoB,IAAGW,GAAI,EAA3B,GAA+BA,GAAtC;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASnC,cAAT,CAAwBoB,KAAxB,EAA+B;AAC7B;AACA,MAAIA,KAAK,CAACiB,IAAV,EAAgB;AACd,WAAOjB,KAAP;AACD;;AAED,MAAIA,KAAK,CAACkB,MAAN,CAAa,CAAb,MAAoB,GAAxB,EAA6B;AAC3B,WAAOtC,cAAc,CAACI,QAAQ,CAACgB,KAAD,CAAT,CAArB;AACD;;AAED,QAAMmB,MAAM,GAAGnB,KAAK,CAACoB,OAAN,CAAc,GAAd,CAAf;AACA,QAAMH,IAAI,GAAGjB,KAAK,CAACqB,SAAN,CAAgB,CAAhB,EAAmBF,MAAnB,CAAb;;AAEA,MAAI,CAAC,KAAD,EAAQ,MAAR,EAAgB,KAAhB,EAAuB,MAAvB,EAA+B,OAA/B,EAAwCC,OAAxC,CAAgDH,IAAhD,MAA0D,CAAC,CAA/D,EAAkE;AAChE,UAAM,IAAIK,KAAJ,CAAU5B,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAyC,sBAAqBI,KAAM;AACxF,2FADoB,GAC0E,CAAC,GAAGX,MAAM,CAACkC,qBAAX,EAAkC,CAAlC,EAAqCvB,KAArC,CADpF,CAAN;AAED;;AAED,MAAIwB,MAAM,GAAGxB,KAAK,CAACqB,SAAN,CAAgBF,MAAM,GAAG,CAAzB,EAA4BnB,KAAK,CAACI,MAAN,GAAe,CAA3C,CAAb;AACA,MAAIqB,UAAJ;;AAEA,MAAIR,IAAI,KAAK,OAAb,EAAsB;AACpBO,IAAAA,MAAM,GAAGA,MAAM,CAACE,KAAP,CAAa,GAAb,CAAT;AACAD,IAAAA,UAAU,GAAGD,MAAM,CAACG,KAAP,EAAb;;AAEA,QAAIH,MAAM,CAACpB,MAAP,KAAkB,CAAlB,IAAuBoB,MAAM,CAAC,CAAD,CAAN,CAAUN,MAAV,CAAiB,CAAjB,MAAwB,GAAnD,EAAwD;AACtDM,MAAAA,MAAM,CAAC,CAAD,CAAN,GAAYA,MAAM,CAAC,CAAD,CAAN,CAAUvB,KAAV,CAAgB,CAAhB,CAAZ;AACD;;AAED,QAAI,CAAC,MAAD,EAAS,YAAT,EAAuB,SAAvB,EAAkC,cAAlC,EAAkD,UAAlD,EAA8DmB,OAA9D,CAAsEK,UAAtE,MAAsF,CAAC,CAA3F,EAA8F;AAC5F,YAAM,IAAIH,KAAJ,CAAU5B,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAyC,sBAAqB6B,UAAW;AAC/F,6FADsB,GAC0E,CAAC,GAAGpC,MAAM,CAACkC,qBAAX,EAAkC,EAAlC,EAAsCE,UAAtC,CADpF,CAAN;AAED;AACF,GAZD,MAYO;AACLD,IAAAA,MAAM,GAAGA,MAAM,CAACE,KAAP,CAAa,GAAb,CAAT;AACD;;AAEDF,EAAAA,MAAM,GAAGA,MAAM,CAACjB,GAAP,CAAW9B,KAAK,IAAImD,UAAU,CAACnD,KAAD,CAA9B,CAAT;AACA,SAAO;AACLwC,IAAAA,IADK;AAELO,IAAAA,MAFK;AAGLC,IAAAA;AAHK,GAAP;AAKD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAAStC,cAAT,CAAwBa,KAAxB,EAA+B;AAC7B,QAAM;AACJiB,IAAAA,IADI;AAEJQ,IAAAA;AAFI,MAGFzB,KAHJ;AAIA,MAAI;AACFwB,IAAAA;AADE,MAEAxB,KAFJ;;AAIA,MAAIiB,IAAI,CAACG,OAAL,CAAa,KAAb,MAAwB,CAAC,CAA7B,EAAgC;AAC9B;AACAI,IAAAA,MAAM,GAAGA,MAAM,CAACjB,GAAP,CAAW,CAACC,CAAD,EAAIqB,CAAJ,KAAUA,CAAC,GAAG,CAAJ,GAAQnB,QAAQ,CAACF,CAAD,EAAI,EAAJ,CAAhB,GAA0BA,CAA/C,CAAT;AACD,GAHD,MAGO,IAAIS,IAAI,CAACG,OAAL,CAAa,KAAb,MAAwB,CAAC,CAA7B,EAAgC;AACrCI,IAAAA,MAAM,CAAC,CAAD,CAAN,GAAa,GAAEA,MAAM,CAAC,CAAD,CAAI,GAAzB;AACAA,IAAAA,MAAM,CAAC,CAAD,CAAN,GAAa,GAAEA,MAAM,CAAC,CAAD,CAAI,GAAzB;AACD;;AAED,MAAIP,IAAI,CAACG,OAAL,CAAa,OAAb,MAA0B,CAAC,CAA/B,EAAkC;AAChCI,IAAAA,MAAM,GAAI,GAAEC,UAAW,IAAGD,MAAM,CAACZ,IAAP,CAAY,GAAZ,CAAiB,EAA3C;AACD,GAFD,MAEO;AACLY,IAAAA,MAAM,GAAI,GAAEA,MAAM,CAACZ,IAAP,CAAY,IAAZ,CAAkB,EAA9B;AACD;;AAED,SAAQ,GAAEK,IAAK,IAAGO,MAAO,GAAzB;AACD;AACD;AACA;AACA;AACA;AACA;;;AAGA,SAASpC,QAAT,CAAkBY,KAAlB,EAAyB;AACvB;AACA,MAAIA,KAAK,CAACoB,OAAN,CAAc,GAAd,MAAuB,CAA3B,EAA8B;AAC5B,WAAOpB,KAAP;AACD;;AAED,QAAM;AACJwB,IAAAA;AADI,MAEF5C,cAAc,CAACoB,KAAD,CAFlB;AAGA,SAAQ,IAAGwB,MAAM,CAACjB,GAAP,CAAW,CAACC,CAAD,EAAIqB,CAAJ,KAAUhB,QAAQ,CAACgB,CAAC,KAAK,CAAN,GAAU9B,IAAI,CAACY,KAAL,CAAW,MAAMH,CAAjB,CAAV,GAAgCA,CAAjC,CAA7B,EAAkEI,IAAlE,CAAuE,EAAvE,CAA2E,EAAtF;AACD;AACD;AACA;AACA;AACA;AACA;;;AAGA,SAAS3B,QAAT,CAAkBe,KAAlB,EAAyB;AACvBA,EAAAA,KAAK,GAAGpB,cAAc,CAACoB,KAAD,CAAtB;AACA,QAAM;AACJwB,IAAAA;AADI,MAEFxB,KAFJ;AAGA,QAAM8B,CAAC,GAAGN,MAAM,CAAC,CAAD,CAAhB;AACA,QAAMO,CAAC,GAAGP,MAAM,CAAC,CAAD,CAAN,GAAY,GAAtB;AACA,QAAMQ,CAAC,GAAGR,MAAM,CAAC,CAAD,CAAN,GAAY,GAAtB;AACA,QAAMS,CAAC,GAAGF,CAAC,GAAGhC,IAAI,CAACP,GAAL,CAASwC,CAAT,EAAY,IAAIA,CAAhB,CAAd;;AAEA,QAAME,CAAC,GAAG,UAAC1B,CAAD;AAAA,QAAI2B,CAAJ,uEAAQ,CAAC3B,CAAC,GAAGsB,CAAC,GAAG,EAAT,IAAe,EAAvB;AAAA,WAA8BE,CAAC,GAAGC,CAAC,GAAGlC,IAAI,CAACN,GAAL,CAASM,IAAI,CAACP,GAAL,CAAS2C,CAAC,GAAG,CAAb,EAAgB,IAAIA,CAApB,EAAuB,CAAvB,CAAT,EAAoC,CAAC,CAArC,CAAtC;AAAA,GAAV;;AAEA,MAAIlB,IAAI,GAAG,KAAX;AACA,QAAMmB,GAAG,GAAG,CAACrC,IAAI,CAACY,KAAL,CAAWuB,CAAC,CAAC,CAAD,CAAD,GAAO,GAAlB,CAAD,EAAyBnC,IAAI,CAACY,KAAL,CAAWuB,CAAC,CAAC,CAAD,CAAD,GAAO,GAAlB,CAAzB,EAAiDnC,IAAI,CAACY,KAAL,CAAWuB,CAAC,CAAC,CAAD,CAAD,GAAO,GAAlB,CAAjD,CAAZ;;AAEA,MAAIlC,KAAK,CAACiB,IAAN,KAAe,MAAnB,EAA2B;AACzBA,IAAAA,IAAI,IAAI,GAAR;AACAmB,IAAAA,GAAG,CAACC,IAAJ,CAASb,MAAM,CAAC,CAAD,CAAf;AACD;;AAED,SAAOrC,cAAc,CAAC;AACpB8B,IAAAA,IADoB;AAEpBO,IAAAA,MAAM,EAAEY;AAFY,GAAD,CAArB;AAID;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASrD,YAAT,CAAsBiB,KAAtB,EAA6B;AAC3BA,EAAAA,KAAK,GAAGpB,cAAc,CAACoB,KAAD,CAAtB;AACA,MAAIoC,GAAG,GAAGpC,KAAK,CAACiB,IAAN,KAAe,KAAf,GAAuBrC,cAAc,CAACK,QAAQ,CAACe,KAAD,CAAT,CAAd,CAAgCwB,MAAvD,GAAgExB,KAAK,CAACwB,MAAhF;AACAY,EAAAA,GAAG,GAAGA,GAAG,CAAC7B,GAAJ,CAAQ+B,GAAG,IAAI;AACnB,QAAItC,KAAK,CAACiB,IAAN,KAAe,OAAnB,EAA4B;AAC1BqB,MAAAA,GAAG,IAAI,GAAP,CAD0B,CACd;AACb;;AAED,WAAOA,GAAG,IAAI,OAAP,GAAiBA,GAAG,GAAG,KAAvB,GAA+B,CAAC,CAACA,GAAG,GAAG,KAAP,IAAgB,KAAjB,KAA2B,GAAjE;AACD,GANK,CAAN,CAH2B,CASvB;;AAEJ,SAAOC,MAAM,CAAC,CAAC,SAASH,GAAG,CAAC,CAAD,CAAZ,GAAkB,SAASA,GAAG,CAAC,CAAD,CAA9B,GAAoC,SAASA,GAAG,CAAC,CAAD,CAAjD,EAAsDI,OAAtD,CAA8D,CAA9D,CAAD,CAAb;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAAS1D,gBAAT,CAA0B2D,UAA1B,EAAsCC,UAAtC,EAAkD;AAChD,QAAMC,IAAI,GAAG5D,YAAY,CAAC0D,UAAD,CAAzB;AACA,QAAMG,IAAI,GAAG7D,YAAY,CAAC2D,UAAD,CAAzB;AACA,SAAO,CAAC3C,IAAI,CAACN,GAAL,CAASkD,IAAT,EAAeC,IAAf,IAAuB,IAAxB,KAAiC7C,IAAI,CAACP,GAAL,CAASmD,IAAT,EAAeC,IAAf,IAAuB,IAAxD,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASlE,KAAT,CAAesB,KAAf,EAAsBvB,KAAtB,EAA6B;AAC3BuB,EAAAA,KAAK,GAAGpB,cAAc,CAACoB,KAAD,CAAtB;AACAvB,EAAAA,KAAK,GAAGc,KAAK,CAACd,KAAD,CAAb;;AAEA,MAAIuB,KAAK,CAACiB,IAAN,KAAe,KAAf,IAAwBjB,KAAK,CAACiB,IAAN,KAAe,KAA3C,EAAkD;AAChDjB,IAAAA,KAAK,CAACiB,IAAN,IAAc,GAAd;AACD;;AAED,MAAIjB,KAAK,CAACiB,IAAN,KAAe,OAAnB,EAA4B;AAC1BjB,IAAAA,KAAK,CAACwB,MAAN,CAAa,CAAb,IAAmB,IAAG/C,KAAM,EAA5B;AACD,GAFD,MAEO;AACLuB,IAAAA,KAAK,CAACwB,MAAN,CAAa,CAAb,IAAkB/C,KAAlB;AACD;;AAED,SAAOU,cAAc,CAACa,KAAD,CAArB;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASrB,MAAT,CAAgBqB,KAAhB,EAAuB6C,WAAvB,EAAoC;AAClC7C,EAAAA,KAAK,GAAGpB,cAAc,CAACoB,KAAD,CAAtB;AACA6C,EAAAA,WAAW,GAAGtD,KAAK,CAACsD,WAAD,CAAnB;;AAEA,MAAI7C,KAAK,CAACiB,IAAN,CAAWG,OAAX,CAAmB,KAAnB,MAA8B,CAAC,CAAnC,EAAsC;AACpCpB,IAAAA,KAAK,CAACwB,MAAN,CAAa,CAAb,KAAmB,IAAIqB,WAAvB;AACD,GAFD,MAEO,IAAI7C,KAAK,CAACiB,IAAN,CAAWG,OAAX,CAAmB,KAAnB,MAA8B,CAAC,CAA/B,IAAoCpB,KAAK,CAACiB,IAAN,CAAWG,OAAX,CAAmB,OAAnB,MAAgC,CAAC,CAAzE,EAA4E;AACjF,SAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,IAAI,CAA5B,EAA+B;AAC7B7B,MAAAA,KAAK,CAACwB,MAAN,CAAaK,CAAb,KAAmB,IAAIgB,WAAvB;AACD;AACF;;AAED,SAAO1D,cAAc,CAACa,KAAD,CAArB;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASd,OAAT,CAAiBc,KAAjB,EAAwB6C,WAAxB,EAAqC;AACnC7C,EAAAA,KAAK,GAAGpB,cAAc,CAACoB,KAAD,CAAtB;AACA6C,EAAAA,WAAW,GAAGtD,KAAK,CAACsD,WAAD,CAAnB;;AAEA,MAAI7C,KAAK,CAACiB,IAAN,CAAWG,OAAX,CAAmB,KAAnB,MAA8B,CAAC,CAAnC,EAAsC;AACpCpB,IAAAA,KAAK,CAACwB,MAAN,CAAa,CAAb,KAAmB,CAAC,MAAMxB,KAAK,CAACwB,MAAN,CAAa,CAAb,CAAP,IAA0BqB,WAA7C;AACD,GAFD,MAEO,IAAI7C,KAAK,CAACiB,IAAN,CAAWG,OAAX,CAAmB,KAAnB,MAA8B,CAAC,CAAnC,EAAsC;AAC3C,SAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,IAAI,CAA5B,EAA+B;AAC7B7B,MAAAA,KAAK,CAACwB,MAAN,CAAaK,CAAb,KAAmB,CAAC,MAAM7B,KAAK,CAACwB,MAAN,CAAaK,CAAb,CAAP,IAA0BgB,WAA7C;AACD;AACF,GAJM,MAIA,IAAI7C,KAAK,CAACiB,IAAN,CAAWG,OAAX,CAAmB,OAAnB,MAAgC,CAAC,CAArC,EAAwC;AAC7C,SAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,IAAI,CAA5B,EAA+B;AAC7B7B,MAAAA,KAAK,CAACwB,MAAN,CAAaK,CAAb,KAAmB,CAAC,IAAI7B,KAAK,CAACwB,MAAN,CAAaK,CAAb,CAAL,IAAwBgB,WAA3C;AACD;AACF;;AAED,SAAO1D,cAAc,CAACa,KAAD,CAArB;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASnB,SAAT,CAAmBmB,KAAnB,EAA8C;AAAA,MAApB6C,WAAoB,uEAAN,IAAM;AAC5C,SAAO9D,YAAY,CAACiB,KAAD,CAAZ,GAAsB,GAAtB,GAA4BrB,MAAM,CAACqB,KAAD,EAAQ6C,WAAR,CAAlC,GAAyD3D,OAAO,CAACc,KAAD,EAAQ6C,WAAR,CAAvE;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.alpha = alpha;\nexports.darken = darken;\nexports.decomposeColor = decomposeColor;\nexports.emphasize = emphasize;\nexports.getContrastRatio = getContrastRatio;\nexports.getLuminance = getLuminance;\nexports.hexToRgb = hexToRgb;\nexports.hslToRgb = hslToRgb;\nexports.lighten = lighten;\nexports.recomposeColor = recomposeColor;\nexports.rgbToHex = rgbToHex;\n\nvar _utils = require(\"@mui/utils\");\n\n/**\n * Returns a number whose value is limited to the given range.\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */\nfunction clamp(value, min = 0, max = 1) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (value < min || value > max) {\n      console.error(`MUI: The value provided ${value} is out of range [${min}, ${max}].`);\n    }\n  }\n\n  return Math.min(Math.max(min, value), max);\n}\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\n * @returns {string} A CSS rgb color string\n */\n\n\nfunction hexToRgb(color) {\n  color = color.slice(1);\n  const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, 'g');\n  let colors = color.match(re);\n\n  if (colors && colors[0].length === 1) {\n    colors = colors.map(n => n + n);\n  }\n\n  return colors ? `rgb${colors.length === 4 ? 'a' : ''}(${colors.map((n, index) => {\n    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;\n  }).join(', ')})` : '';\n}\n\nfunction intToHex(int) {\n  const hex = int.toString(16);\n  return hex.length === 1 ? `0${hex}` : hex;\n}\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {object} - A MUI color object: {type: string, values: number[]}\n */\n\n\nfunction decomposeColor(color) {\n  // Idempotent\n  if (color.type) {\n    return color;\n  }\n\n  if (color.charAt(0) === '#') {\n    return decomposeColor(hexToRgb(color));\n  }\n\n  const marker = color.indexOf('(');\n  const type = color.substring(0, marker);\n\n  if (['rgb', 'rgba', 'hsl', 'hsla', 'color'].indexOf(type) === -1) {\n    throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: Unsupported \\`${color}\\` color.\nThe following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` : (0, _utils.formatMuiErrorMessage)(9, color));\n  }\n\n  let values = color.substring(marker + 1, color.length - 1);\n  let colorSpace;\n\n  if (type === 'color') {\n    values = values.split(' ');\n    colorSpace = values.shift();\n\n    if (values.length === 4 && values[3].charAt(0) === '/') {\n      values[3] = values[3].slice(1);\n    }\n\n    if (['srgb', 'display-p3', 'a98-rgb', 'prophoto-rgb', 'rec-2020'].indexOf(colorSpace) === -1) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: unsupported \\`${colorSpace}\\` color space.\nThe following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` : (0, _utils.formatMuiErrorMessage)(10, colorSpace));\n    }\n  } else {\n    values = values.split(',');\n  }\n\n  values = values.map(value => parseFloat(value));\n  return {\n    type,\n    values,\n    colorSpace\n  };\n}\n/**\n * Converts a color object with type and values to a string.\n * @param {object} color - Decomposed color\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns {string} A CSS color string\n */\n\n\nfunction recomposeColor(color) {\n  const {\n    type,\n    colorSpace\n  } = color;\n  let {\n    values\n  } = color;\n\n  if (type.indexOf('rgb') !== -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map((n, i) => i < 3 ? parseInt(n, 10) : n);\n  } else if (type.indexOf('hsl') !== -1) {\n    values[1] = `${values[1]}%`;\n    values[2] = `${values[2]}%`;\n  }\n\n  if (type.indexOf('color') !== -1) {\n    values = `${colorSpace} ${values.join(' ')}`;\n  } else {\n    values = `${values.join(', ')}`;\n  }\n\n  return `${type}(${values})`;\n}\n/**\n * Converts a color from CSS rgb format to CSS hex format.\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\n */\n\n\nfunction rgbToHex(color) {\n  // Idempotent\n  if (color.indexOf('#') === 0) {\n    return color;\n  }\n\n  const {\n    values\n  } = decomposeColor(color);\n  return `#${values.map((n, i) => intToHex(i === 3 ? Math.round(255 * n) : n)).join('')}`;\n}\n/**\n * Converts a color from hsl format to rgb format.\n * @param {string} color - HSL color values\n * @returns {string} rgb color values\n */\n\n\nfunction hslToRgb(color) {\n  color = decomposeColor(color);\n  const {\n    values\n  } = color;\n  const h = values[0];\n  const s = values[1] / 100;\n  const l = values[2] / 100;\n  const a = s * Math.min(l, 1 - l);\n\n  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n\n  let type = 'rgb';\n  const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\n\n  if (color.type === 'hsla') {\n    type += 'a';\n    rgb.push(values[3]);\n  }\n\n  return recomposeColor({\n    type,\n    values: rgb\n  });\n}\n/**\n * The relative brightness of any point in a color space,\n * normalized to 0 for darkest black and 1 for lightest white.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {number} The relative brightness of the color in the range 0 - 1\n */\n\n\nfunction getLuminance(color) {\n  color = decomposeColor(color);\n  let rgb = color.type === 'hsl' ? decomposeColor(hslToRgb(color)).values : color.values;\n  rgb = rgb.map(val => {\n    if (color.type !== 'color') {\n      val /= 255; // normalized\n    }\n\n    return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;\n  }); // Truncate at 3 digits\n\n  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));\n}\n/**\n * Calculates the contrast ratio between two colors.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} A contrast ratio value in the range 0 - 21.\n */\n\n\nfunction getContrastRatio(foreground, background) {\n  const lumA = getLuminance(foreground);\n  const lumB = getLuminance(background);\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n/**\n * Sets the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} value - value to set the alpha channel to in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction alpha(color, value) {\n  color = decomposeColor(color);\n  value = clamp(value);\n\n  if (color.type === 'rgb' || color.type === 'hsl') {\n    color.type += 'a';\n  }\n\n  if (color.type === 'color') {\n    color.values[3] = `/${value}`;\n  } else {\n    color.values[3] = value;\n  }\n\n  return recomposeColor(color);\n}\n/**\n * Darkens a color.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction darken(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] *= 1 - coefficient;\n  } else if (color.type.indexOf('rgb') !== -1 || color.type.indexOf('color') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] *= 1 - coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}\n/**\n * Lightens a color.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction lighten(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] += (100 - color.values[2]) * coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] += (255 - color.values[i]) * coefficient;\n    }\n  } else if (color.type.indexOf('color') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] += (1 - color.values[i]) * coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}\n/**\n * Darken or lighten a color, depending on its luminance.\n * Light colors are darkened, dark colors are lightened.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction emphasize(color, coefficient = 0.15) {\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}"]},"metadata":{},"sourceType":"script"}