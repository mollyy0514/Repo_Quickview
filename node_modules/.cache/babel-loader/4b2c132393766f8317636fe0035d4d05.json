{"ast":null,"code":"var _jsxFileName = \"/Users/molly/Desktop/React/Repo_Quickview/src/Results_test.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell, { tableCellClasses } from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { request } from \"@octokit/request\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StyledTableCell = styled(TableCell)(_ref => {\n  let {\n    theme\n  } = _ref;\n  return {\n    [`&.${tableCellClasses.head}`]: {\n      backgroundColor: theme.palette.common.black,\n      color: theme.palette.common.white\n    },\n    [`&.${tableCellClasses.body}`]: {\n      fontSize: 17\n    }\n  };\n});\nconst StyledTableRow = styled(TableRow)(_ref2 => {\n  let {\n    theme\n  } = _ref2;\n  return {\n    '&:nth-of-type(odd)': {\n      backgroundColor: theme.palette.action.hover\n    },\n    // hide last border\n    '&:last-child td, &:last-child th': {\n      border: 0\n    }\n  };\n});\n\nconst Results_test = props => {\n  _s();\n\n  const {\n    repo\n  } = props;\n  console.log(\"REPOS: \", repo);\n  const searchOwner = props.header;\n\n  var repoInfoList = /*#__PURE__*/_jsxDEV(\"li\", {\n    children: \"hihi\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 24\n  }, this);\n\n  const [repoLen, setRepoLen] = useState(-1);\n  const [repoOwner, setRepoOwner] = useState(\"\");\n  const [repoList, setRepoList] = useState([]);\n  useEffect(() => {\n    if (repo.data === undefined) {\n      console.log(\"repo data is undefined\");\n    } else {\n      setRepoLen(Object.keys(repo.data).length); // console.log(\"repolen setted\", repo.data, repoLen, Object.keys(repo.data).length)\n\n      resetRepoList(Object.keys(repo.data).length);\n    } // console.log(typeof(repo));\n\n  }, []);\n\n  const resetRepoList = e => {\n    if (repo.data === undefined) {\n      console.log(\"repo data is undefined\");\n    } else if (e > 0) {\n      let owner = repo.data[0].owner.login;\n      let newArray = [];\n      repo.data.map(item => {\n        var info = {\n          id: '',\n          owner: '',\n          name: '',\n          starCnt: '',\n          description: ''\n        };\n        info.id = item.id;\n        info.owner = searchOwner;\n        info.name = item.name;\n        info.starCnt = item.stargazers_count;\n        info.description = item.description;\n        newArray.push(info);\n        console.log(\"debug: \", newArray);\n      }); // console.log(\"final input: \", newArray);\n\n      setRepoOwner(owner);\n      setRepoList(newArray);\n    } else {\n      setRepoList(\"No Repos found!\"); // console.log(\"nothing...\")\n    }\n  };\n\n  const [items, setItems] = useState([]);\n  const [hasMore, sethasMore] = useState(true);\n  const [page, setpage] = useState(2);\n\n  const fetchComments = async () => {\n    const res = await request('GET /users/{username}/repos', {\n      username: repoOwner,\n      per_page: 10,\n      sort: 'created',\n      page: page\n    });\n    const data = res.data;\n    console.log(\"data: \", data);\n    return data;\n  };\n\n  const fetchData = async () => {\n    const commentsFormServer = await fetchComments();\n    setItems([...items, ...commentsFormServer]);\n\n    if (commentsFormServer.length === 0 || commentsFormServer.length < 10) {\n      sethasMore(false);\n    }\n\n    setpage(page + 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"results\",\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/Repo_Quickview/\",\n      className: \"backToSearch\",\n      onClick: () => {\n        window.location.href = \"/Repo_Quickview/\";\n      },\n      children: \"Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"user\",\n      children: repoOwner\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this), repoLen > 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"sort\",\n      children: \"sorted by created time \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 31\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n      dataLength: items.length //This is important field to render the next data\n      ,\n      next: fetchData,\n      hasMore: hasMore,\n      loader: /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 25\n      }, this),\n      endMessage: /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          textAlign: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Yay! You have seen it all\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 21\n      }, this),\n      children: items.map(item => {\n        /*#__PURE__*/\n        _jsxDEV(\"div\", {\n          children: [\" \", item.name, \" \"]\n        }, item.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 21\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this), repoLen === -1 ? /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 17\n    }, this) : repoLen > 0 ? /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n      dataLength: items.length //This is important field to render the next data\n      ,\n      next: fetchData,\n      hasMore: hasMore,\n      loader: /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 29\n      }, this),\n      endMessage: /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          textAlign: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Yay! You have seen it all\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 25\n      }, this),\n      children: items.map(item => {\n        /*#__PURE__*/\n        _jsxDEV(\"div\", {\n          children: [\" \", item.name, \" \"]\n        }, item.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 21\n    }, this) // <TableContainer component={Paper}>\n    //     <Table sx={{ minWidth: 700 }} aria-label=\"customized table\">\n    //         <TableHead>\n    //         <TableRow>\n    //             <StyledTableCell>Repository Name</StyledTableCell>\n    //             <StyledTableCell align=\"right\">Description</StyledTableCell>\n    //             <StyledTableCell align=\"right\">Stars&nbsp;</StyledTableCell>\n    //         </TableRow>\n    //         </TableHead>\n    //         <TableBody className=\"repoTable\">\n    //         {repoInfoList = repoList.map((item) => (\n    //             <StyledTableRow hover role=\"checkbox\" key={item.id}>\n    //                 <StyledTableCell className=\"tableRepoName\" component=\"th\" scope=\"row\">\n    //                     <Link to={`/users/${repoOwner}/repos/${item.name}`}>\n    //                         {item.name}\n    //                     </Link>\n    //                 </StyledTableCell>\n    //                 <StyledTableCell className=\"starCnt\" align=\"right\">\n    //                         <Link to={`/users/${repoOwner}/repos/${item.name}`}>\n    //                             {item.description}\n    //                         </Link>\n    //                     </StyledTableCell>\n    //                 <StyledTableCell className=\"starCnt\" align=\"right\">\n    //                     <Link to={`/users/${repoOwner}/repos/${item.name}`}>\n    //                         {item.starCnt}\n    //                     </Link>\n    //                 </StyledTableCell>\n    //             </StyledTableRow>\n    //         ))}\n    //         </TableBody>\n    //     </Table>\n    // </TableContainer>\n    :\n    /*#__PURE__*/\n    // repoInfoList = <li className=\"noRepo\">No Repositary found.</li>\n    _jsxDEV(\"div\", {\n      className: \"noRepo\",\n      children: \"No Repositary found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Results_test, \"ynmGKg/6PKTAV3HgecZPwHHEeuE=\");\n\n_c = Results_test;\nexport default Results_test;\n\nvar _c;\n\n$RefreshReg$(_c, \"Results_test\");","map":{"version":3,"sources":["/Users/molly/Desktop/React/Repo_Quickview/src/Results_test.js"],"names":["useState","useEffect","Link","React","styled","Table","TableBody","TableCell","tableCellClasses","TableContainer","TableHead","TableRow","Paper","InfiniteScroll","request","StyledTableCell","theme","head","backgroundColor","palette","common","black","color","white","body","fontSize","StyledTableRow","action","hover","border","Results_test","props","repo","console","log","searchOwner","header","repoInfoList","repoLen","setRepoLen","repoOwner","setRepoOwner","repoList","setRepoList","data","undefined","Object","keys","length","resetRepoList","e","owner","login","newArray","map","item","info","id","name","starCnt","description","stargazers_count","push","items","setItems","hasMore","sethasMore","page","setpage","fetchComments","res","username","per_page","sort","fetchData","commentsFormServer","window","location","href","textAlign"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell, { tableCellClasses } from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\n\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { request } from \"@octokit/request\";\n\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\n    [`&.${tableCellClasses.head}`]: {\n      backgroundColor: theme.palette.common.black,\n      color: theme.palette.common.white,\n    },\n    [`&.${tableCellClasses.body}`]: {\n      fontSize: 17,\n    },\n  }));\n\n  const StyledTableRow = styled(TableRow)(({ theme }) => ({\n    '&:nth-of-type(odd)': {\n      backgroundColor: theme.palette.action.hover,\n    },\n    // hide last border\n    '&:last-child td, &:last-child th': {\n      border: 0,\n    },\n  }));\n\nconst Results_test = (props) => {\n \n    const { repo } = props;\n    console.log(\"REPOS: \", repo);\n    const searchOwner = props.header;\n\n    var repoInfoList = <li>hihi</li>;\n    const [repoLen, setRepoLen] = useState(-1);\n    const [repoOwner, setRepoOwner] = useState(\"\");\n    const [repoList, setRepoList] = useState([]);\n\n    useEffect(() => {\n        if (repo.data === undefined) {\n            console.log(\"repo data is undefined\")\n        }\n        else {\n            setRepoLen(Object.keys(repo.data).length);\n            // console.log(\"repolen setted\", repo.data, repoLen, Object.keys(repo.data).length)\n            resetRepoList(Object.keys(repo.data).length);\n        }\n        // console.log(typeof(repo));\n    }, [])\n\n\n\n    const resetRepoList = (e) => {\n        if (repo.data === undefined) {\n            console.log(\"repo data is undefined\")\n        }\n        else if (e > 0) {\n            let owner = repo.data[0].owner.login;\n            let newArray = [];\n\n            repo.data.map((item) => {\n                var info = {\n                    id: '',\n                    owner: '',\n                    name: '',\n                    starCnt: '',\n                    description: '',\n                }\n                info.id = item.id;\n                info.owner = searchOwner;\n                info.name = item.name;\n                info.starCnt = item.stargazers_count;\n                info.description = item.description;\n\n                newArray.push(info);\n                console.log(\"debug: \", newArray);\n                \n            })\n            // console.log(\"final input: \", newArray);\n            setRepoOwner(owner);\n            setRepoList(newArray);\n        }\n        else {\n            setRepoList(\"No Repos found!\");\n            // console.log(\"nothing...\")\n        }\n    }\n\n    const [items, setItems] = useState([]);\n\n    const [hasMore, sethasMore] = useState(true);\n\n    const [page, setpage] = useState(2);\n\n    const fetchComments = async () => {\n\n        const res =  await request('GET /users/{username}/repos', {\n            username: repoOwner,\n            per_page: 10,\n            sort: 'created',\n            page: page\n        })\n        const data = res.data;\n        console.log(\"data: \", data)\n        return data;\n    };\n\n    const fetchData = async () => {\n        const commentsFormServer = await fetchComments();\n\n        setItems([...items, ...commentsFormServer]);\n        if (commentsFormServer.length === 0 || commentsFormServer.length < 10) {\n            sethasMore(false);\n        }\n        setpage(page + 1);\n    };\n\n    return (\n        <div className=\"results\">\n            <Link to=\"/Repo_Quickview/\" className=\"backToSearch\" onClick={() => {window.location.href=\"/Repo_Quickview/\"}}>Back</Link>\n            <header className=\"user\">\n                { repoOwner }\n            </header>\n            \n            {(repoLen > 0) ? (<p className=\"sort\">sorted by created time </p>):(<></>)}\n\n            <InfiniteScroll\n                dataLength={items.length} //This is important field to render the next data\n                next={fetchData}\n                hasMore={hasMore}\n                loader={<h4>Loading...</h4>}\n                endMessage={\n                    <p style={{ textAlign: 'center' }}>\n                        <b>Yay! You have seen it all</b>\n                    </p>\n                }\n            >\n                {items.map((item) => {\n                    <div key={item.id}> {item.name} </div> ;\n                })}\n            </InfiniteScroll>\n\n            {(repoLen === -1) ? (\n                <div />\n                 ) : ((repoLen > 0) ? (\n                    <InfiniteScroll\n                    dataLength={items.length} //This is important field to render the next data\n                    next={fetchData}\n                    hasMore={hasMore}\n                    loader={<h4>Loading...</h4>}\n                    endMessage={\n                        <p style={{ textAlign: 'center' }}>\n                            <b>Yay! You have seen it all</b>\n                        </p>\n                    }\n                >\n                    {items.map((item) => {\n                        <div key={item.id}> {item.name} </div> ;\n                    })}\n                </InfiniteScroll>\n                        // <TableContainer component={Paper}>\n                        //     <Table sx={{ minWidth: 700 }} aria-label=\"customized table\">\n                        //         <TableHead>\n                        //         <TableRow>\n                        //             <StyledTableCell>Repository Name</StyledTableCell>\n                        //             <StyledTableCell align=\"right\">Description</StyledTableCell>\n                        //             <StyledTableCell align=\"right\">Stars&nbsp;</StyledTableCell>\n                        //         </TableRow>\n                        //         </TableHead>\n                        //         <TableBody className=\"repoTable\">\n                        //         {repoInfoList = repoList.map((item) => (\n                        //             <StyledTableRow hover role=\"checkbox\" key={item.id}>\n                        //                 <StyledTableCell className=\"tableRepoName\" component=\"th\" scope=\"row\">\n                        //                     <Link to={`/users/${repoOwner}/repos/${item.name}`}>\n                        //                         {item.name}\n                        //                     </Link>\n                        //                 </StyledTableCell>\n                        //                 <StyledTableCell className=\"starCnt\" align=\"right\">\n                        //                         <Link to={`/users/${repoOwner}/repos/${item.name}`}>\n                        //                             {item.description}\n                        //                         </Link>\n                        //                     </StyledTableCell>\n                        //                 <StyledTableCell className=\"starCnt\" align=\"right\">\n                        //                     <Link to={`/users/${repoOwner}/repos/${item.name}`}>\n                        //                         {item.starCnt}\n                        //                     </Link>\n                        //                 </StyledTableCell>\n                        //             </StyledTableRow>\n                        //         ))}\n                        //         </TableBody>\n                        //     </Table>\n                        // </TableContainer>\n                    ) : (\n                        // repoInfoList = <li className=\"noRepo\">No Repositary found.</li>\n                        <div className=\"noRepo\">No Repositary found.</div>\n                    )\n                 )}\n        </div>\n     );\n}\n \nexport default Results_test;\n"]},"metadata":{},"sourceType":"module"}